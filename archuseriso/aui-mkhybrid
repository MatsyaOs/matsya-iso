#!/usr/bin/env bash
#
# Copyright (C) 2021 Laurent Jourden <laurent85@enarel.fr>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Script to create a usb drive both live and permanent install
# from an archuseriso iso image.

set -e -u

appname="${0##*/}"
btrfs="no"
btrfs_compress=""
btrfs_subvol_home=""
btrfs_subvol_root=""
copytoram_size=""
desktop=""
encryption="no"
esp_files_settings=()
esp_label=""
esp_size=""
ext4_journal="yes"
f2fs="no"
# Free space required 15360 MiB
FREESPACE=15360
img_label=""
iso_label=""
iso_file=""
isosize=0
medium_version=""
refind="yes"
root_files_settings=()
root_flags="defaults"
root_label=""
root_size=""
usb_device=""
username="archie"
WD="${PWD}"
workdir="$(mktemp -u auiwork.XXXXXXXX)"
valid_medium_version="v5"

_usage() {
        echo
        echo "${appname}, create a bootbale usb drive from an archuseriso image."
        echo 'Both live usb and standard installation.'
        echo
        echo 'Synopsis:'
        echo "${appname} [options] <iso image> <usb device>"
        echo
        echo 'Help:'
        echo "${appname} --help"
        exit "${1}"
}

_help() {
        echo
        echo "${appname}, create a bootable usb drive from an archuseriso image."
        echo 'Both live usb and standard installation.'
        echo
        echo 'Synopsis:'
        echo "${appname} [options] <usb device> <iso image>"
        echo
        echo 'Options:'
        echo '-h, --help                  Command line help'
        echo '--btrfs                     Btrfs file system for the persistent partition)'
        echo '--btrfs-compress algo       Btrfs compression algorithm: lzo, none, zlib, zstd (Default)'
        echo '--encrypt                   Encrypt persistent partition'
        echo '--f2fs                      F2FS file system for the persistent partition '
        echo '--no-journal                Disable ext4 journal'
        echo '--no-refind                 Bypass rEFInd boot manager'
        echo '--raw-write                 Raw ISO image write to USB drive (dd like mode)'
        echo '--size-part2 integer[g|G]   2nd partition size in GiB (Boot & efi partition)'
        echo '--size-part3 integer[g|G]   3rd partition size in GiB (persistent partition)'
        echo "--username <user>           set a custom username, default username is ${username}"
        echo
        echo 'Example:'
        echo "sudo ${appname} aui-xfce-linux_5_10_9-optimus-0121-x64.iso /dev/sdc"
        echo
        echo 'Example with custom partitioning, unallocated space left for other usages:'
        echo "sudo ${appname}  --size-part2 1G --size-part3 20G aui-xfce-linux_5_10_9-i3-0121-x64.iso /dev/sdc"
        echo
        exit "${1}"
}

_msg_info() {
        local _msg="${1}"
        printf '[%s] INFO: %s\n' "${appname}" "${_msg}"
}

_cleanup() {
        local _workdirs
        _workdirs=('squashfs' 'iso' 'usbro' 'usbrw/home' 'usbrw/boot' 'usbesp' 'usbrw')
        for _workdir in ${_workdirs[*]}; do
                if mountpoint -q -- "${WD}/${workdir}/${_workdir}"; then
                        umount -- "${WD}/${workdir}/${_workdir}"
                fi
        done
        for _workdir in ${_workdirs[*]}; do
                if [[ -d "${WD}/${workdir}/${_workdir}" ]]; then
                        rmdir -- "${WD}/${workdir}/${_workdir}"
                fi
        done
        if [[ -d "${WD}/${workdir}" ]]; then
                rmdir -- "${WD}/${workdir}"
        fi
        if [[ "${encryption}" == "yes" && -e "/dev/mapper/${crypt_mapper:-auicrypt}" ]]; then
                cryptsetup close "${crypt_mapper:-auicrypt}"
        fi
}

_unmount() {
        echo
        _msg_info "Unmounting working directories, may take some time"
        _cleanup
        _msg_info "Done!"
}

_luks() {
        echo
        _msg_info "Setting up encryption, type in a passphrase of your choice"
        if ! cryptsetup --type=luks2 --label="${crypt_label:-AUI_LUKS}" --uuid="${crypt_uuid:=$(uuidgen)}" -q luksFormat -- "${usb_device}3" > /dev/null; then
               echo 'Encryption setup failed, exiting!'
               exit 1
        fi
        _msg_info "Done!"
        echo
        _msg_info "LUKS setup done! type in your passphrase to unlock partition"
        if ! cryptsetup -- open "${usb_device}3" "${crypt_mapper:-auicrypt}"; then
               echo 'Error: Could not unlock partition! Exiting.'
               exit 1
        fi
        root_device="/dev/mapper/${crypt_mapper:-auicrypt}"
        _msg_info "Done!"
        echo
}

_encryption_settings() {
        echo
        _msg_info "Encryption settings"
        sed -i -- "s|block|& encrypt|" "${WD}/${workdir}/usbrw/etc/mkinitcpio.conf"
        _msg_info "initramfs update"
        arch-chroot -- "${WD}/${workdir}/usbrw" mkinitcpio -P &> /dev/null
        _msg_info "Done!"
        sed -i -- "s|rw$|cryptdevice=UUID=${crypt_uuid}:${crypt_mapper:-auicrypt} &|" \
                  "${WD}/${workdir}/usbrw/boot/loader/entries/archiso-aui-0-x86_64-linux.conf"
        sed -i -- "s|rw$|cryptdevice=UUID=${crypt_uuid}:${crypt_mapper:-auicrypt} &|" \
                  "${WD}/${workdir}/usbrw/boot/syslinux/archiso_sys-linux.cfg"
        _msg_info "Done!"
}

_checks() {
        if [[ $# -ne 2 ]]; then
               echo 'Error: Invalid arguments!'
               _usage 1
        fi
        if [[ ${EUID} -ne 0 ]]; then
               echo 'This script must be run as root!'
               exit 1
        fi
        iso_file="${1}"
        usb_device="${2}"
        if [[ ! $(LC_ALL=C stat -c %F -- "${usb_device}" 2> /dev/null) =~ 'block special file' ]]; then
                echo "Error: ${usb_device} is not a block device!"
                _usage 1
        fi
        case "$(LC_ALL=C stat -c %t -- "${usb_device}" 2> /dev/null)" in
                '8')
                        # SCSI disk devices (0-15)
                        ;;
                '65')
                        # SCSI disk devices (16-31)
                        ;;
                '66')
                        # SCSI disk devices (32-47)
                        ;;
                '67')
                        # SCSI disk devices (48-63)
                        ;;
                '68')
                        # SCSI disk devices (64-79)
                        ;;
                '69')
                        # SCSI disk devices (80-95)
                        ;;
                '70')
                        # SCSI disk devices (96-111)
                        ;;
                '71')
                        # SCSI disk devices (112-127)
                        ;;
                '128')
                        # SCSI disk devices (128-143)
                        ;;
                '129')
                        # SCSI disk devices (144-159)
                        ;;
                '130')
                        # SCSI disk devices (160-175)
                        ;;
                '131')
                        # SCSI disk devices (176-191)
                        ;;
                '132')
                        # SCSI disk devices (192-207)
                        ;;
                '133')
                        # SCSI disk devices (208-223)
                        ;;
                '134')
                        # SCSI disk devices (234-239)
                        ;;
                '135')
                        # SCSI disk devices (240-255)
                        ;;
                *)
                        echo "Error: ${usb_device} is not a scsi disk device!"
                        _usage 1
        esac
        if [[ ! $(lsblk -dnro hotplug -- "${usb_device}" 2> /dev/null) -eq 1 ]]; then
                echo "Error: ${usb_device} is not a removable block device!"
                _usage 1
        fi
        if [[ ! "$(lsblk -dnro tran -- "${usb_device}" 2> /dev/null)" == 'usb' ]]; then
                echo "Error: ${usb_device} is not a usb device!"
                _usage 1
        fi
        if grep -q -- "${usb_device}" /proc/self/mountinfo > /dev/null; then
                echo "Error: ${usb_device} appears in active mounts, unmount drive partitions before proceeding!"
                exit 1
        fi
        if [[ ! -f "${iso_file}" ]]; then
               echo "file ${iso_file} not found!"
               _usage 1
        fi
        if [[ ! $(file -- "${iso_file}" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                echo "Error: ${iso_file} is not an iso image!"
                _usage 1
        fi
        # Set efi boot partition size in MiB
        if [[ -n "${esp_size}" ]]; then
                if ! [[ "${esp_size}" =~ ^[1-9][0-9]?+$ ]]; then
                        echo "FAT partition size error: Invalid size argument (GiB): ${esp_size}"
                        _usage 1
                fi
                esp_size=$(( esp_size * 1024 ))
        else
                esp_size=512
        fi
        # Set root partition size in MiB, free space left by default
        if [[ -n "${root_size}" ]]; then
                if ! [[ "${root_size}" =~ ^[1-9][0-9]?+$ ]]; then
                        echo "Persistent partition size error: Invalid size argument (GiB): ${root_size}"
                        _usage 1
                fi
                root_size=$(( root_size * 1024 ))
        fi
        if [[ "${btrfs}" == "yes" ]]; then
                if ! pacman -Q btrfs-progs &> /dev/null; then
                        echo 'btrfs-progs package not installed, aborting!'
                        exit 0
                fi
        fi
        if [[ "${f2fs}" == "yes" ]]; then
                if ! pacman -Q f2fs-tools &> /dev/null; then
                        echo 'f2fs-tools package not installed, aborting!'
                        exit 0
                fi
        fi
}

_init() {
        local _esp_size _root_size
        drivesize=$(blockdev --getsize64 "${usb_device}")
        # Logical sector size
        LOGICSEC=$(blockdev --getss "${usb_device}")
        # Drive partition #1, first sector at 1 MiB
        STARTSEC=$(( 1024 * 1024 / LOGICSEC ))
        isosize=$(stat -c %s -- "${iso_file}")
        # Check usb drive capacity
        if [[ ! ${drivesize} -gt $(( isosize + FREESPACE * 1024 * 1024 )) ]]; then
               echo 'Storage capacity error!'
               exit 1
        fi
        # check partitions size don't exceed drive's capacity
        _esp_size=$(( esp_size * 1024 * 1024 ))
        if [[ -n "${root_size}" ]]; then
                _root_size=$(( root_size * 1024 * 1024 ))
        else
                _root_size=0
        fi
        if [[ ! ${drivesize} -gt $(( isosize + _esp_size + _root_size )) ]]; then
                echo "Size settings error: exceeds drive storage capacity!"
                exit 1
        fi
}

_confirm_write() {
        # Confim write
        echo
        _msg_info "This process may take a long time depending on the drive's write speed, be patient!"
        _msg_info ""
        _msg_info "ISO file:   ${iso_file}"
        _msg_info "USB device: ${usb_device}"
        _msg_info "username:   ${username}"
        echo
        read -r -n1 -p "Confirm write to $(lsblk -dnro model,size -- "${usb_device}") (N/y)? "
        echo
        if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
               echo 'Operation canceled by user!'
               exit 0
        fi
}

_usb_prepare() {
        # Check & prepare working directory
        for mountpoint in "${workdir}" "${workdir}/"{iso,squashfs} "${workdir}/usb"{ro,esp,rw}; do
                if findmnt -nr -- "${mountpoint}" > /dev/null; then
                       echo "Error: ${mountpoint} appears in active mounts, unmount before proceeding!"
                       exit 1
                fi
        done
        for mountpoint in "${workdir}" "${workdir}/"{iso,squashfs} "${workdir}/usb"{ro,esp,rw}; do
                if [[ -e "${WD}/${mountpoint}" ]]; then
                        echo "Error: ${mountpoint} exists in working directory! Delete or rename before proceeding!"
                        exit 1
                fi
        done
        if [[ -e "/dev/mapper/${crypt_mapper:-auicrypt}" ]]; then
                echo "Error: cryptsetup mapping /dev/mapper/${crypt_mapper:-auicrypt} exists! cannot proceed."
                exit 1
        fi
        mkdir -p -- "${WD}/${workdir}"/{iso,squashfs} "${WD}/${workdir}/usb"{ro,esp,rw}

        # Mount iso
        echo
        _msg_info 'Mounting iso'
        _msg_info "mountpoint: ${WD}/${workdir}/iso"
        if ! mount -o ro -- "${iso_file}" "${WD}/${workdir}/iso"; then
                echo "Error: mounting iso failed!"
                exit 1
        fi

        # check iso
        if [[ ! -e "${WD}/${workdir}/iso/aui/mediumdef.sh" ]]; then
                echo "Error: ${iso_file} is not a compatible iso image!"
                echo
                _usage 1
        fi

        # source medium def variables
        source "${WD}/${workdir}/iso/aui/mediumdef.sh"
        if [[ ! "${medium_version}" == "${valid_medium_version}" ]]; then
                echo "Error: ${iso_file} is not a compatible iso image!"
                echo
                _usage 1
        fi

        if [[ -f "${WD}/${workdir}/iso/${install_dir}/x86_64/airootfs.sfs" ]]; then
                copytoram_size=$(( $(stat -c %s "${WD}/${workdir}/iso/${install_dir}/x86_64/airootfs.sfs") + \
                                     1024 * 64 ))
        fi

        if [[ ! -d "${WD}/${workdir}/iso/EFI/" ]]; then
                echo "Error: missing EFI directory, ${iso_file} is not a compatible iso image!"
                echo
                _usage 1
        fi

        _msg_info "Done!"
}

_partitions() {
        local _part_type_linux _part_type_msft
        local _start_ro_part _start_esp_part _start_rw_part
        local _sectors_ro_part _sectors_esp_part _sectors_rw_part
        local _size_ro_part _size_esp_part _size_rw_part

        # GPT Partition type : Linux Filesystem
        _part_type_linux="0FC63DAF-8483-4772-8E79-3D69D8477DE4"
        # GPT Partition type : Microsoft basic data
        _part_type_msft="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"

        # Start sector, partition size in both sectors and MiB 
        _start_ro_part=$(( STARTSEC ))
        _size_ro_part=$(( isosize + 128 * 1024 * 1024 ))
        _sectors_ro_part=$(( _size_ro_part / LOGICSEC ))
        _start_esp_part=$(( _start_ro_part + _sectors_ro_part ))
        _size_esp_part=$(( esp_size * 1024 * 1024 ))
        _sectors_esp_part=$(( _size_esp_part / LOGICSEC ))
        _start_rw_part=$(( _start_esp_part + _sectors_esp_part ))
        if [[ -n "${root_size}" ]]; then
                _size_rw_part=$(( root_size * 1024 * 1024 ))
                _sectors_rw_part=$(( _size_rw_part / LOGICSEC ))
        else
                _size_rw_part=$(( drivesize - _size_esp_part - _size_ro_part - (STARTSEC * LOGICSEC) ))
        fi

        # Wipe drive
        flock -- "${usb_device}" wipefs --all --force -- "${usb_device}"* > /dev/null
        sleep 5
        partprobe -- "${usb_device}"
        echo

        # New gpt partition table
        _msg_info "Partitioning drive"
        _msg_info "Creating partitions: new gpt label"
        if ! echo 'label: gpt' | sfdisk -W always -- "${usb_device}" > /dev/null; then
                echo 'Failed to create new gpt partition table!'
                exit 1
        fi
        sleep 5
        partprobe -- "${usb_device}"

        # partition #1 iso data
        _msg_info "partition #1, live partition:  $(( _size_ro_part / 1024 / 1024 )) MiB"
        if ! echo "$(( _start_ro_part )),$(( _sectors_ro_part )),${_part_type_linux}," | sfdisk -W always -- "${usb_device}" > /dev/null; then
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 5

        # partition #2 boot & efi partition
        _msg_info "partition #2, boot partition: $(( _size_esp_part / 1024 / 1024 )) MiB"
        if ! echo "$(( _start_esp_part )),$(( _sectors_esp_part )),${_part_type_msft}," | sfdisk --append -W always -- "${usb_device}" > /dev/null; then
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 5

        # partition #3 root partition
        _msg_info "partition #3, root partition: $(( _size_rw_part / 1024 / 1024 )) MiB"
        if ! echo "$(( _start_rw_part )),${_sectors_rw_part:-},${_part_type_linux}," | sfdisk --append -W always -- "${usb_device}" > /dev/null; then
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 5

        partprobe -- "${usb_device}"
        _msg_info "Done!"
}

_format_btrfs() {
        _msg_info "partition #3: type Btrfs, label ${root_label}"
        if ! flock -- "${root_device}" mkfs.btrfs -L "${root_label}" -- "${root_device}" > /dev/null; then
               echo 'Formatting partition failed!'
               exit 1
        fi
}

_format_f2fs() {
        _msg_info "partition #3: type F2FS, label ${root_label}"
        if ! flock -- "${root_device}" mkfs.f2fs -l "${root_label}" -O encrypt,extra_attr,compression -- "${root_device}" > /dev/null; then
               echo 'Formatting partition failed!'
               exit 1
        fi
}

_format_ext4() {
        _msg_info "partition #3: type Ext4, label ${root_label}"
        if ! flock -- "${root_device}" mkfs.ext4 -L "${root_label}" -O encrypt -q -- "${root_device}" > /dev/null; then
               echo 'Formatting partition failed!'
               exit 1
        fi
        # disable ext4 journal
        if [[ "${ext4_journal}" == "no" ]]; then
                _msg_info "Ext4 partitions: disable journal"
                tune2fs -O '^has_journal' -- "${usb_device}1" &> /dev/null
                tune2fs -O '^has_journal' -- "${root_device}" &> /dev/null
        fi
}

_format() {
        echo
        _msg_info "Formatting partitions"
        _msg_info "partition #1: type Ext4, label ${img_label}"
        if ! flock -- "${usb_device}1" mkfs.ext4 -L "${img_label}" -O encrypt -m 0 -q -- "${usb_device}1" > /dev/null; then
               echo 'Partition format failed!'
               exit 1
        fi
        _msg_info "partition #2: type FAT, label ${esp_label}"
        if ! flock -- "${usb_device}2" mkfs.fat -F32 -n "${esp_label}" -- "${usb_device}2" &> /dev/null; then
               echo 'Partition format failed!'
               exit 1
        fi
        root_device="${usb_device}3"
        if [[ "${encryption}" == "yes" ]]; then
               _luks
        fi
        # root partition, filesystem type
        # Default ext4
        if [[ "${btrfs}" == "yes" ]]; then
                _format_btrfs
        elif [[ "${f2fs}" == "yes" ]]; then
                _format_f2fs
        else
                _format_ext4
        fi
        _msg_info "Done!"
}

_btrfs_subvolumes() {
        # rootfs and home subvolumes creation for persistence
        btrfs subvolume create -- "${WD}/${workdir}/usbrw/${btrfs_subvol_root}" > /dev/null
        btrfs subvolume create -- "${WD}/${workdir}/usbrw/${btrfs_subvol_home}" > /dev/null
}

_mount_subvolumes() {
        umount "${WD}/${workdir}/usbrw"
        sleep 5
        mount -o "${root_flags}" -- "${root_device}" "${WD}/${workdir}/usbrw"
        mkdir -p -- "${WD}/${workdir}/usbrw/home"
        mount -o subvol="${btrfs_subvol_home}" -- "${root_device}" "${WD}/${workdir}/usbrw/home"
}

_mount() {
        # Mount usb device
        echo
        _msg_info "Mounting usb partitions"
        _msg_info "device: ${usb_device}1, mountpoint: ${WD}/${workdir}/usbro"
        mount -- "${usb_device}1" "${WD}/${workdir}/usbro"
        _msg_info "device: ${usb_device}2, mountpoint: ${WD}/${workdir}/usbesp"
        mount -- "${usb_device}2" "${WD}/${workdir}/usbesp"
        _msg_info "device: ${root_device}, mountpoint: ${WD}/${workdir}/usbrw"
        mount -- "${root_device}" "${WD}/${workdir}/usbrw"
        if [[ "${btrfs}" == "yes" ]]; then
                _btrfs_subvolumes
                _mount_subvolumes
        fi
        _msg_info "Done!"
        # Mount squashfs
        _msg_info "Mounting live image: mountpoint ${WD}/${workdir}/squashfs"
        mount -o ro -- "${WD}/${workdir}/iso/arch/x86_64/airootfs.sfs" "${WD}/${workdir}/squashfs"
        _msg_info "Done!"
}

_copy() {
        echo
        _msg_info "Copying live to ${WD}/${workdir}/usbro"
        cp -rT -- "${WD}/${workdir}/iso" "${WD}/${workdir}/usbro"
        _msg_info "Done!"
        _msg_info "Installing system to ${WD}/${workdir}/usbrw, may take some time"
        cp -aT -- "${WD}/${workdir}/squashfs" "${WD}/${workdir}/usbrw"
        # Copy aui install tree
        cp -aT -- "${WD}/${workdir}/iso/aui/hybrid/auirootfs" "${WD}/${workdir}/usbrw"
        mount -o bind -- "${WD}/${workdir}/usbesp" "${WD}/${workdir}/usbrw/boot"
        _msg_info "Done!"
}

_no_refind() {
        if [[ -f "${WD}/${workdir}/usbesp/EFI/live/livedisk.efi" ]]; then
                if [[ -f "${WD}/${workdir}/usbesp/EFI/BOOT/BOOTx64.efi" ]]; then
                        mv -- "${WD}/${workdir}/usbesp/EFI/BOOT/BOOTx64.efi" \
                              "${WD}/${workdir}/usbesp/EFI/BOOT/refind_x64.efi"
                        mv -- "${WD}/${workdir}/usbesp/EFI/BOOT/" \
                              "${WD}/${workdir}/usbesp/EFI/refind/"
                fi
                mv -- "${WD}/${workdir}/usbesp/EFI/live/livedisk.efi" \
                      "${WD}/${workdir}/usbesp/EFI/live/BOOTx64.efi"
                mv -- "${WD}/${workdir}/usbesp/EFI/live/" \
                      "${WD}/${workdir}/usbesp/EFI/BOOT/"
        fi
}

_esp() {
        # ESP setup
        echo
        _msg_info "Setting up ESP"
        _msg_info "copying esp files to ${WD}/${workdir}/usbesp"
        cp -LrT -- "${WD}/${workdir}/iso/aui/liveusb/esp" "${WD}/${workdir}/usbesp/"
        cp -- "${WD}/${workdir}/iso/aui/liveusb/refind.conf" "${WD}/${workdir}/usbesp/EFI/BOOT/"
        cp -r -- "${WD}/${workdir}/iso/aui/hybrid/loader" "${WD}/${workdir}/usbesp/"
        cp -r -- "${WD}/${workdir}/iso/aui/hybrid/syslinux" "${WD}/${workdir}/usbesp/"
        for _mediumfile in "${esp_files_settings[@]}"; do
                if [[ -f "${WD}/${workdir}/usbesp/${_mediumfile}" ]]; then
                        sed -i -- "s|%ARCHISO_LABEL%|${iso_label}|g;
                                   s|%DESKTOP%|${desktop}|g;
                                   s|%ESP_LABEL%|${esp_label}|g;
                                   s|%IMG_LABEL%|${img_label}|g;
                                   s|%ROOT_LABEL%|${root_label}|g;
                                   s|%ROOT_FLAGS%|${root_flags}|g;
                                   s|=${iso_label}|=${img_label}|g" \
                                  "${WD}/${workdir}/usbesp/${_mediumfile}"
                        if [[ -n "${copytoram_size}" ]]; then
                                sed -i -- "s|copytoram|copytoram_size=${copytoram_size} &|" \
                                          "${WD}/${workdir}/usbesp/${_mediumfile}"
                        fi
                fi
        done
        if [[ "${refind}" == "no" ]]; then
                _no_refind
        fi
        _msg_info "Done!"
}

_settings() {
        # System settings
        # * remove live settings except volatile journal
        # * fstab
        # * live user renamed 'archie', no password set

        _msg_info "Removing live settings"

        # fstab
        for _mediumfile in "${root_files_settings[@]}"; do
                if [[ -f "${WD}/${workdir}/usbrw/${_mediumfile}" ]]; then
                        sed -i -- "s|%ESP_LABEL%|${esp_label}|g;
                                   s|%ROOT_LABEL%|${root_label}|g;
                                   s|%BTRFS_SUBVOL_HOME%|${btrfs_subvol_home}|g" \
                                  "${WD}/${workdir}/usbrw/${_mediumfile}"
                        if [[ "${btrfs}" == "no" && "${_mediumfile}" =~ 'fstab' ]]; then
                                # remove unused btrfs line in fstab
                                sed -i -- '/btrfs/d' "${WD}/${workdir}/usbrw/${_mediumfile}"
                        fi
                fi
        done

        # sshd, mirrorlist, logind.conf
        sed -i -- 's/^\(PermitRootLogin \).\+/#\1prohibit-password/' "${WD}/${workdir}/usbrw/etc/ssh/sshd_config"
        rm -r -- "${WD}/${workdir}/usbrw/etc/systemd/logind.conf.d"

        # live services
        arch-chroot -- "${WD}/${workdir}/usbrw" systemctl disable pacman-init.service choose-mirror.service --quiet
        rm -r -- "${WD}/${workdir}/usbrw/etc/systemd/system/"{choose-mirror.service,pacman-init.service,etc-pacman.d-gnupg.mount,getty@tty1.service.d}
        rm -- "${WD}/${workdir}/usbrw/root/"{.automated_script.sh,.zlogin}
        rm -- "${WD}/${workdir}/usbrw/etc/initcpio/hooks/archiso"

        # autologin
        if [[ -e "${WD}/${workdir}/usbrw/etc/lightdm/lightdm.conf" ]]; then
                sed -i -- 's/^\(autologin-user=\)live$/#\1/' "${WD}/${workdir}/usbrw/etc/lightdm/lightdm.conf"
                sed -i -- 's/^\(autologin-session=\).*/#\1/' "${WD}/${workdir}/usbrw/etc/lightdm/lightdm.conf"
        fi
        if [[ -e "${WD}/${workdir}/usbrw/etc/sddm.conf.d/autologin.conf" ]]; then
                rm -- "${WD}/${workdir}/usbrw/etc/sddm.conf.d/autologin.conf"
        fi

        # sudo
        sed -i -- 's/^\(%wheel\s.*NOPASSWD\)/# \1/' "${WD}/${workdir}/usbrw/etc/sudoers"
        sed -i -- 's/^#\s\(%wheel\s.*)\sALL\)$/\1/' "${WD}/${workdir}/usbrw/etc/sudoers"

        _msg_info "Done!"

        # Arch keyring
        _msg_info "Initialising pacman keys"
        arch-chroot -- "${WD}/${workdir}/usbrw" pacman-key --init &> /dev/null
        arch-chroot -- "${WD}/${workdir}/usbrw" pacman-key --populate archlinux &> /dev/null
        _msg_info "Done!"

        # username
        if [[ -d "${WD}/${workdir}/usbrw/home/live" ]]; then
                _msg_info "Configuring user ${username}"
                mv -- "${WD}/${workdir}/usbrw/home/live" "${WD}/${workdir}/usbrw/home/${username}"
                sed -i -- "s/live/${username}/g" \
                          "${WD}/${workdir}/usbrw/etc/"{passwd,group,shadow,gshadow}
                if [[ -e "${WD}/${workdir}/usbrw/etc/samba/smb.conf" ]]; then
                        sed -i -- "s/live/${username}/g" \
                                  "${WD}/${workdir}/usbrw/etc/samba/smb.conf"
                fi
        else
                _msg_info "no user account found on the live image!"
                username="root"
        fi
        _msg_info "Done!"

        # initramfs
        _msg_info "initramfs update"
        arch-chroot -- "${WD}/${workdir}/usbrw" mkinitcpio -P &> /dev/null
        _msg_info "Done!"

        if [[ "${encryption}" == "yes" ]]; then
                _encryption_settings
        fi
}

_biosbootloader() {
        _msg_info "Installing boot loader"
        if ! syslinux --directory syslinux --install -- "${usb_device}2" &> /dev/null; then
                echo 'Boot loader installation failed!'
                exit 1
        fi
        if ! dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/gptmbr.bin of="${usb_device}" 2> /dev/null; then
                echo 'Boot loader installation failed!'
                exit 1
        fi
        if ! sfdisk --part-attrs "${usb_device}" 2 LegacyBIOSBootable &> /dev/null; then
                echo 'Boot loader installation failed!'
                exit 1
        fi
        _msg_info "Done!"
}

# arguments
OPTS=$(getopt -o 'h' --long 'btrfs,btrfs-compress:,encrypt,help,f2fs,no-journal,no-refind' \
	             --long 'size-part2:,size-part3:,username:' \
                     --long 'nojournal,norefind,sizepart2:,sizepart3:' \
                     -n "${appname}" -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 1

while true; do
        case "$1" in
                '-h'|'--help')
                        _help 0 ;;
                '--btrfs')
                        btrfs="yes"
                        btrfs_subvol_home="/home"
                        btrfs_subvol_root="/rootfs"
                        root_flags="subvol=${btrfs_subvol_root},compress=${btrfs_compress:-zstd}"
                        f2fs="no"
                        shift ;;
                '--btrfs-compress')
                        if [[ "${2}" == 'lzo'  || \
                              "${2}" == 'no'   || \
                              "${2}" == 'none' || \
                              "${2}" == 'zlib' || \
                              "${2}" == 'zstd'      ]]; then
                                btrfs_compress="${2}"
                        fi
                        shift 2 ;;
                '--encrypt')
                        encryption="yes"
                        shift ;;
                '--f2fs')
                        f2fs="yes"
                        btrfs="no"
                        shift ;;
                '--no-journal'|'--nojournal')
                        ext4_journal="no"
                        shift ;;
                '--no-refind'|'--norefind')
                        refind="no"
                        shift ;;
                '--size-part2'|'--sizepart2')
                        esp_size="${2/[gG]}"
                        shift 2;;
                '--size-part3'|'--sizepart3')
                        root_size="${2/[gG]}"
                        shift 2;;
                '--username')
                        username="${2}"
                        shift 2;;
                '--')
                        shift
                        break ;;
        esac
done

trap _cleanup EXIT
_checks "$@"
_init
_confirm_write
_usb_prepare
_partitions
_format
_mount
_copy
_esp
_settings
_unmount
_biosbootloader
echo
_msg_info "Success!"
echo
echo "IMPORTANt NOTICE:"
echo "- username is ${username}"
echo "- no password was set"

# vim: set expandtab:
